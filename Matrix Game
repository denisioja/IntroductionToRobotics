#include "LedControl.h"

const int dinPin = 12;
const int clockPin = 11;
const int loadPin = 10;

const int buttonPin = 13;
bool buttonPressed = false;
unsigned long flickerStartTime = 0;
const unsigned long flickerDuration = 3000;

const int xPin = A0;
const int yPin = A1;

LedControl lc = LedControl(dinPin, clockPin, loadPin, 1);

byte matrixBrightness = 2;
byte xPos = 0;
byte yPos = 0;
byte xLastPos = 0;
byte yLastPos = 0;

const int minThreshold = 200;
const int maxThreshold = 600;

const byte moveInterval = 100;
unsigned long lastMoved = 0;

const byte matrixSize = 8;
bool matrixChanged = true;

byte matrix[matrixSize][matrixSize] = {};

void setup() {
  Serial.begin(9600);
  pinMode(buttonPin, INPUT_PULLUP);
  lc.shutdown(0, false);
  lc.setIntensity(0, matrixBrightness);
  lc.clearDisplay(0);
  generateMaze();
  displayMaze();
  matrix[xPos][yPos] = 1;
}

void loop() {
  if (millis() - lastMoved > moveInterval) {
    updatePositions();
    lastMoved = millis();
  }
  if (digitalRead(buttonPin) == HIGH) {
    if(!buttonPressed){
      buttonPressed = true;
      flickerStartTime = millis();
      bool isLedOn = false; 
      while (millis() - flickerStartTime < flickerDuration) {
        matrixChanged = true;
        isLedOn = !isLedOn;
        lc.setLed(0, xPos, yPos, isLedOn);
        delay(100);  
      }
      matrixChanged = true;
      lc.setLed(0, xPos-1, yPos, 1);
      lc.setLed(0, xPos+1, yPos, 1);
      lc.setLed(0, xPos, yPos-1, 1);
      lc.setLed(0, xPos, yPos+1, 1);
      if(matrix[xPos-1][yPos] == 1)
        matrix[xPos-1][yPos] = 0;
      if(matrix[xPos+1][yPos] == 1)
        matrix[xPos+1][yPos] = 0;
      if(matrix[xPos][yPos-1] == 1)
        matrix[xPos][yPos-1] = 0;
      if(matrix[xPos][yPos+1] == 1)
        matrix[xPos][yPos+1] = 0;
      delay(100);
      lc.setLed(0, xPos-1, yPos, 0);
      lc.setLed(0, xPos+1, yPos, 0);
      lc.setLed(0, xPos, yPos-1, 0);
      lc.setLed(0, xPos, yPos+1, 0);
      lc.setLed(0, xPos, yPos, false);
    }
    else buttonPressed = false;
  }
  if (matrixChanged) {
    updateMatrix();
    matrixChanged = false;
  }
}

void handleButtonPress() {
  //depinzand de meniu
  matrixChanged = true;
  matrix[xPos][yPos] = 1;
}


void updateMatrix() {
  for (int row = 0; row < matrixSize; row++) {
    for (int col = 0; col < matrixSize; col++) {
      lc.setLed(0, row, col, matrix[row][col]);
    }
  }
}

void updatePositions() {
  int xValue = analogRead(xPin);
  int yValue = analogRead(yPin);
  xLastPos = xPos;
  yLastPos = yPos;
  int newXPos = xPos;
  int newYPos = yPos;

  if (xValue < minThreshold) {
    newXPos = (xPos + 1) % matrixSize;
  } else if (xValue > maxThreshold) {
    newXPos = (xPos > 0) ? xPos - 1 : matrixSize - 1;
  }
  if (yValue < minThreshold) {
    newYPos = (yPos > 0) ? yPos - 1 : matrixSize - 1;
  } else if (yValue > maxThreshold) {
    newYPos = (yPos + 1) % matrixSize;
  }
  if (matrix[newXPos][newYPos] == 0) {
    xPos = newXPos;
    yPos = newYPos;

    if (xPos != xLastPos || yPos != yLastPos) {
      matrixChanged = true;
      matrix[xLastPos][yLastPos] = 0;
      matrix[xPos][yPos] = 1;
    }
  }
}

void generateMaze() {
  randomSeed(analogRead(0));
  for (int i = 0; i < matrixSize; i++) {
    for (int j = 0; j < matrixSize; j++) {
      if ((i == 0 && (j == 0 || j == 1)) || (i == 1 && (j == 0 || j == 1)))
        matrix[i][j] = 0;
      else matrix[i][j] = random(2);
    }
  }
}

void displayMaze() {
  for (int row = 0; row < matrixSize; row++) {
    for (int col = 0; col < matrixSize; col++) {
      lc.setLed(0, row, col, matrix[row][col]);
      delay(50);
    }
  }
}
